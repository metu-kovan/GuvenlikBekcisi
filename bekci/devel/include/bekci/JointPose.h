// Generated by gencpp from file bekci/JointPose.msg
// DO NOT EDIT!


#ifndef BEKCI_MESSAGE_JOINTPOSE_H
#define BEKCI_MESSAGE_JOINTPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bekci/Pose.h>

namespace bekci
{
template <class ContainerAllocator>
struct JointPose_
{
  typedef JointPose_<ContainerAllocator> Type;

  JointPose_()
    : DOF(0)
    , names()
    , poses()
    , radiuses()  {
    }
  JointPose_(const ContainerAllocator& _alloc)
    : DOF(0)
    , names(_alloc)
    , poses(_alloc)
    , radiuses(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _DOF_type;
  _DOF_type DOF;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;

   typedef std::vector< ::bekci::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::bekci::Pose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _radiuses_type;
  _radiuses_type radiuses;




  typedef boost::shared_ptr< ::bekci::JointPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bekci::JointPose_<ContainerAllocator> const> ConstPtr;

}; // struct JointPose_

typedef ::bekci::JointPose_<std::allocator<void> > JointPose;

typedef boost::shared_ptr< ::bekci::JointPose > JointPosePtr;
typedef boost::shared_ptr< ::bekci::JointPose const> JointPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bekci::JointPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bekci::JointPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bekci

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'bekci': ['/home/fatih/git/GuvenlikBekcisi/bekci/src/bekci/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bekci::JointPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bekci::JointPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bekci::JointPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bekci::JointPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bekci::JointPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bekci::JointPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bekci::JointPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbffc491a33d92e07782372cb0de7374";
  }

  static const char* value(const ::bekci::JointPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbffc491a33d92e0ULL;
  static const uint64_t static_value2 = 0x7782372cb0de7374ULL;
};

template<class ContainerAllocator>
struct DataType< ::bekci::JointPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bekci/JointPose";
  }

  static const char* value(const ::bekci::JointPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bekci::JointPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 DOF\n\
string[] names\n\
Pose[] poses\n\
float64[] radiuses\n\
================================================================================\n\
MSG: bekci/Pose\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::bekci::JointPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bekci::JointPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DOF);
      stream.next(m.names);
      stream.next(m.poses);
      stream.next(m.radiuses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bekci::JointPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bekci::JointPose_<ContainerAllocator>& v)
  {
    s << indent << "DOF: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DOF);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::bekci::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "radiuses[]" << std::endl;
    for (size_t i = 0; i < v.radiuses.size(); ++i)
    {
      s << indent << "  radiuses[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.radiuses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEKCI_MESSAGE_JOINTPOSE_H
